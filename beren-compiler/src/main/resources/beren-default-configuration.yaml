operationsMappings:
  ### NUMBERS ###
  greaterThan(var):
    operationCall: io.github.indesil.beren.operations.Operations.greaterThan(this, var)
    defaultMessage: "%{paramName} must be greater than %{var}"
  greaterThanOrEquals(var):
    operationCall: io.github.indesil.beren.operations.Operations.greaterThanOrEquals(this, var)
    defaultMessage: "%{paramName} must be greater or equal to %{var}"
  lessThan(var):
    operationCall: io.github.indesil.beren.operations.Operations.lessThan(this, var)
    defaultMessage: "%{paramName} must be less than %{var}"
  lessThanOrEquals(var):
    operationCall: io.github.indesil.beren.operations.Operations.lessThanOrEquals(this, var)
    defaultMessage: "%{paramName} must be less or equal to %{var}"
  between(a,b):
    operationCall: io.github.indesil.beren.operations.Operations.between(this, a, b)
    defaultMessage: "%{paramName} must be between %{a} and %{b}"

  ### OBJECTS ###
  isNull:
    operationCall: java.util.Objects.isNull(this)
    defaultMessage: "%{paramName} must be null!"
  notNull:
    operationCall: java.util.Objects.nonNull(this)
    defaultMessage: "%{paramName} must not be null!"
  equals(var):
    operationCall: java.util.Objects.equals(this, var)
    defaultMessage: "%{paramName} must be equal to %{var}"
  notEquals(var):
    operationCall: io.github.indesil.beren.operations.Operations.notEquals(this, var)
    defaultMessage: "%{paramName} must be not equal to %{var}"
  oneOf(a):
    operationCall: io.github.indesil.beren.operations.Operations.oneOf(this, a)
    defaultMessage: "%{paramName} must be one of %{a}"
  neitherOf(a):
    operationCall: io.github.indesil.beren.operations.Operations.neitherOf(this, a)
    defaultMessage: "%{paramName} must be neither of %{a}"

  ### COLLECTIONS ###
  emptyCollection:
    operationCall: org.apache.commons.collections4.CollectionUtils.isEmpty(this)
    defaultMessage: "Collection %{paramName} must be empty!"
  notEmptyCollection:
    operationCall: org.apache.commons.collections4.CollectionUtils.isNotEmpty(this)
    defaultMessage: "Collection %{paramName} must not be empty!"

  ### BOOLEANS ###
  isTrue:
    operationCall: org.apache.commons.lang3.BooleanUtils.isTrue(this)
    defaultMessage: "%{paramName} must be true!"
  isFalse:
    operationCall: org.apache.commons.lang3.BooleanUtils.isFalse(this)
    defaultMessage: "%{paramName} must be false!"

  ### STRINGS ###
  emptyString:
    operationCall: org.apache.commons.lang3.StringUtils.isEmpty(this)
    defaultMessage: "%{paramName} must be empty!"
  notEmptyString:
    operationCall: org.apache.commons.lang3.StringUtils.isNotEmpty(this)
    defaultMessage: "%{paramName} must not be empty!"
  startsWith(var):
    operationCall: org.apache.commons.lang3.StringUtils.startsWith(this, var)
    defaultMessage: "%{paramName} must start with %{var}"
  endsWith(var):
    operationCall: org.apache.commons.lang3.StringUtils.endsWith(this, var)
    defaultMessage: "%{paramName} must end with %{var}"
  stringContains(var):
    operationCall: org.apache.commons.lang3.StringUtils.contains(this, var)
    defaultMessage: "%{paramName} must contains %{var}"