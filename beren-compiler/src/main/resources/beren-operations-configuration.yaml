operationsMappings:
  ### NUMBERS ###
  min(value):
    operationCall: io.github.indesil.beren.operations.NumberOperations.min(this, value)
    defaultMessage: "{javax.validation.constraints.Min.message}"
  max(value):
    operationCall: io.github.indesil.beren.operations.NumberOperations.max(this, value)
    defaultMessage: "{javax.validation.constraints.Max.message}"
  decimalMin(value, inclusive):
    operationCall: io.github.indesil.beren.operations.NumberOperations.decimalMin(this, value, inclusive)
    defaultMessage: "{javax.validation.constraints.DecimalMin.message}"
  decimalMax(value, inclusive):
    operationCall: io.github.indesil.beren.operations.NumberOperations.decimalMax(this, value, inclusive)
    defaultMessage: "{javax.validation.constraints.DecimalMax.message}"
  digits(integer, fraction):
    operationCall: io.github.indesil.beren.operations.NumberOperations.digits(this, integer, fraction)
    defaultMessage: "{javax.validation.constraints.Digits.message}"
  negative:
    operationCall: io.github.indesil.beren.operations.NumberOperations.negative(this)
    defaultMessage: "{javax.validation.constraints.Negative.message}"
  negativeOrZero:
    operationCall: io.github.indesil.beren.operations.NumberOperations.negativeOrZero(this)
    defaultMessage: "{javax.validation.constraints.NegativeOrZero.message}"
  positive:
    operationCall: io.github.indesil.beren.operations.NumberOperations.positive(this)
    defaultMessage: "{javax.validation.constraints.Positive.message}"
  positiveOrZero:
    operationCall: io.github.indesil.beren.operations.NumberOperations.positiveOrZero(this)
    defaultMessage: "{javax.validation.constraints.PositiveOrZero.message}"
  between(min, max):
    operationCall: io.github.indesil.beren.operations.NumberOperations.between(this, min, max)
    defaultMessage: "{io.github.beren.validator.constraints.Between.message}"

  ### OBJECTS ###
  "null":
    operationCall: java.util.Objects.isNull(this)
    defaultMessage: "{javax.validation.constraints.Null.message}"
  notNull:
    operationCall: java.util.Objects.nonNull(this)
    defaultMessage: "{javax.validation.constraints.NotNull.message}"
  oneOf(array):
    operationCall: io.github.indesil.beren.operations.CollectionOperations.oneOf(this, array)
    defaultMessage: "{io.github.beren.validator.constraints.OneOf.message}"
  neitherOf(array):
    operationCall: io.github.indesil.beren.operations.CollectionOperations.neitherOf(this, array)
    defaultMessage: "{io.github.beren.validator.constraints.NeitherOf.message}"

  ### BOOLEANS ###
  assertTrue:
    operationCall: org.apache.commons.lang3.BooleanUtils.isNotFalse(this)
    defaultMessage: "{javax.validation.constraints.AssertTrue.message}"
  assertFalse:
    operationCall: org.apache.commons.lang3.BooleanUtils.isNotTrue(this)
    defaultMessage: "{javax.validation.constraints.AssertFalse.message}"

  ### COLLECTIONS ###
  notEmpty:
    operationCall: io.github.indesil.beren.operations.CollectionOperations.isNotEmpty(this)
    defaultMessage: "{javax.validation.constraints.NotEmpty.message}"
  size(min, max):
    operationCall: io.github.indesil.beren.operations.CollectionOperations.size(this, min, max)
    defaultMessage: "{javax.validation.constraints.Size.message}"

  ### STRINGS ###
  notBlank:
    operationCall: org.apache.commons.lang3.StringUtils.isNotBlank(this)
    defaultMessage: "{javax.validation.constraints.NotBlank.message}"
  startsWith(prefix):
    operationCall: org.apache.commons.lang3.StringUtils.startsWith(this, prefix)
    defaultMessage: "{io.github.beren.validator.constraints.StartsWith.message}"
  endsWith(suffix):
    operationCall: org.apache.commons.lang3.StringUtils.endsWith(this, suffix)
    defaultMessage: "{io.github.beren.validator.constraints.EndsWith.message}"
  contains(substr):
    operationCall: org.apache.commons.lang3.StringUtils.contains(this, substr)
    defaultMessage: "{io.github.beren.validator.constraints.Contains.message}"
  email(additionalPattern, flags):
    operationCall: io.github.indesil.beren.operations.Operations.email(this, additionalPattern, flags)
    defaultMessage: "{javax.validation.constraints.Email.message}"
  pattern(pattern, flags):
    operationCall: io.github.indesil.beren.operations.Operations.pattern(this, pattern, flags)
    defaultMessage: "{javax.validation.constraints.Pattern.message}"

  ### DATES ###
  future:
    operationCall:  io.github.indesil.beren.operations.DateOperations.future(this)
    defaultMessage: "{javax.validation.constraints.Future.message}"
  futureOrPresent:
    operationCall:  io.github.indesil.beren.operations.futureOrPresent.future(this)
    defaultMessage: "{javax.validation.constraints.FutureOrPresent.message}"
  past:
    operationCall:  io.github.indesil.beren.operations.DateOperations.past(this)
    defaultMessage: "{javax.validation.constraints.Past.message}"
  pastOrPresent:
    operationCall:  io.github.indesil.beren.operations.futureOrPresent.pastOrPresent(this)
    defaultMessage: "{javax.validation.constraints.PastOrPresent.message}"